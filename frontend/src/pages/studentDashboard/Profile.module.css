/* src/components/Profile/Profile.module.css */

/*
  Removed redundant :root variables here.
  Assume these are defined globally in index.css or a dedicated variables file.
  The variables used in this file should always reference the global definitions.
*/

.loadingWrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 200px;
  /* Use text-muted, which will adapt */
  color: var(--text-muted);
  font-size: 1.1rem;
}

.container {
  max-width: 900px;
  margin: 2rem auto;
  padding: 1.5rem;
  /* Ensure font family matches global theme */
  font-family: 'Outfit', sans-serif;
}

.heading {
  font-size: 2.2rem;
  font-weight: 700;
  /* Use text-primary, which will adapt */
  color: var(--text-primary);
  text-align: center;
  margin-bottom: 2rem;
}

.card {
  /* Use background-secondary for cards, which will adapt */
  background-color: var(--background-secondary);
  border-radius: 1rem;
  /* Use shadow variable for consistency */
  box-shadow: var(--shadow-color-light);
  padding: 2.5rem;
  display: flex;
  flex-direction: column;
  gap: 2rem;
  transition: background-color 0.3s ease, box-shadow 0.3s ease; /* Smooth transition */
}

.profileHeader {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  padding-bottom: 1.5rem;
  /* Use border-light, which will adapt */
  border-bottom: 1px solid var(--border-light);
}

.avatar {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  object-fit: cover;
  /* Use primary-blue, which will adapt */
  border: 4px solid var(--primary-blue);
  /* Use shadow variable for consistency, consider a specific --shadow-color-avatar if needed */
  box-shadow: 0 4px 15px var(--shadow-color-light);
  margin-bottom: 1rem;
}

.userName {
  font-size: 1.8rem;
  font-weight: 700;
  /* Use text-primary, which will adapt */
  color: var(--text-primary);
  margin-bottom: 0.25rem;
}

.userEmail {
  font-size: 1rem;
  /* Use text-muted, which will adapt */
  color: var(--text-muted);
  margin-bottom: 0.75rem;
}

.roleBadge {
  /* Use primary-blue, which will adapt */
  background-color: var(--primary-blue);
  /* Use text-light, which will adapt (white/light gray) */
  color: var(--text-light);
  padding: 0.4rem 0.8rem;
  border-radius: 0.5rem;
  font-size: 0.85rem;
  font-weight: 600;
  letter-spacing: 0.5px;
  text-transform: uppercase;
}

.sectionDivider {
  padding-bottom: 1.5rem;
  /* Use border-light, which will adapt */
  border-bottom: 1px solid var(--border-light);
}

.sectionTitle {
  font-size: 1.3rem;
  font-weight: 600;
  /* Use text-primary, which will adapt */
  color: var(--text-primary);
  margin-bottom: 1.5rem;
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.infoGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
}

.infoItem {
  /* Use background-muted, which will adapt */
  background-color: var(--background-muted);
  border-radius: 0.75rem;
  padding: 1rem 1.25rem;
  /* Use border-light, which will adapt */
  border: 1px solid var(--border-light);
  transition: background-color 0.3s ease, border-color 0.3s ease; /* Smooth transition */
}

.infoLabel {
  font-size: 0.9rem;
  font-weight: 500;
  /* Use text-muted, which will adapt */
  color: var(--text-muted);
  margin-bottom: 0.4rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.infoValue {
  font-size: 1rem;
  font-weight: 600;
  /* Use text-primary, which will adapt */
  color: var(--text-primary);
  word-break: break-word;
}

.icon {
  /* Use primary-blue, which will adapt */
  color: var(--primary-blue);
}

.editButtonContainer {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 1rem;
  margin-top: 1rem;
}

.editButton {
  /* Use primary-blue, which will adapt */
  background-color: var(--primary-blue);
  /* Use text-light, which will adapt */
  color: var(--text-light);
  border: none;
  border-radius: 0.75rem;
  padding: 0.8rem 1.5rem;
  font-size: 1.05rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
  /* Use a dedicated shadow variable for primary action buttons */
  box-shadow: 0 4px 10px var(--shadow-color-primary-action); /* New variable needed */
}

.editButton:hover {
  /* Use primary-blue-dark, which will adapt */
  background-color: var(--primary-blue-dark);
  transform: translateY(-2px);
  /* Use a dedicated hover shadow variable for primary action buttons */
  box-shadow: 0 6px 12px var(--shadow-color-primary-action-hover); /* New variable needed */
}

.editButton:active {
  transform: translateY(0);
  /* Use a slightly lighter active shadow */
  box-shadow: 0 2px 5px var(--shadow-color-primary-action);
}

.buttonIcon {
  /* Use text-light, which will adapt */
  color: var(--text-light);
}

/* --- Styles for Forms (EditProfileForm & ChangePasswordForm) --- */
.formCard {
  /* Use background-secondary for cards, which will adapt */
  background-color: var(--background-secondary);
  border-radius: 1rem;
  /* Use shadow variable for consistency, possibly a lighter one for nested cards */
  box-shadow: 0 2px 8px var(--shadow-color-light); /* Assuming this is lighter than --shadow-light */
  padding: 2rem;
  margin-top: 1rem;
  /* Use border-light, which will adapt */
  border: 1px solid var(--border-light);
  transition: background-color 0.3s ease, box-shadow 0.3s ease; /* Smooth transition */
}

.formTitle {
  font-size: 1.5rem;
  font-weight: 700;
  /* Use text-primary, which will adapt */
  color: var(--text-primary);
  margin-bottom: 1.5rem;
  text-align: center;
}

.profileForm {
  display: flex;
  flex-direction: column;
  gap: 1.25rem;
}

.formGroup {
  display: flex;
  flex-direction: column;
}

.formLabel {
  font-size: 0.9rem;
  font-weight: 600;
  /* Use text-primary, which will adapt */
  color: var(--text-primary);
  margin-bottom: 0.5rem;
}

.input {
  width: 100%;
  padding: 0.75rem 1rem;
  /* Use border-light, which will adapt */
  border: 1px solid var(--border-light);
  border-radius: 0.5rem;
  font-size: 1rem;
  /* Use text-primary, which will adapt */
  color: var(--text-primary);
  /* Use background-muted for inputs, which will adapt */
  background-color: var(--background-muted);
  transition: border-color 0.2s ease, box-shadow 0.2s ease, background-color 0.2s ease;
  box-sizing: border-box;
}

.input:focus {
  outline: none;
  /* Use primary-blue, which will adapt */
  border-color: var(--primary-blue);
  /* Use primary-blue for focus shadow, consider a specific --shadow-color-focus */
  box-shadow: 0 0 0 3px var(--primary-blue-focus-shadow); /* New variable needed */
}

.inputHint {
  font-size: 0.8rem;
  /* Use text-muted, which will adapt */
  color: var(--text-muted);
  margin-top: 0.4rem;
  line-height: 1.4;
}

.formActions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  margin-top: 1.5rem;
}

.button {
  padding: 0.8rem 1.2rem;
  border: none;
  border-radius: 0.5rem;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.2s ease, box-shadow 0.2s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.saveButton {
  /* Use primary-blue, which will adapt */
  background-color: var(--primary-blue);
  /* Use text-light, which will adapt */
  color: var(--text-light);
  /* Use shadow variable for consistency, primary action specific */
  box-shadow: 0 2px 8px var(--shadow-color-primary-action);
}

.saveButton:hover:not(:disabled) {
  /* Use primary-blue-dark, which will adapt */
  background-color: var(--primary-blue-dark);
  /* Use shadow variable for consistency, primary action hover specific */
  box-shadow: 0 4px 10px var(--shadow-color-primary-action-hover);
}

.saveButton:disabled {
  /* Use cool-gray or a specific disabled background variable */
  background-color: var(--cool-gray);
  cursor: not-allowed;
  box-shadow: none;
  opacity: 0.7;
  /* Consider text-secondary or a disabled text color */
  color: var(--text-secondary); /* Text color for disabled button */
}

.cancelButton {
  /* Use background-muted for cancel, which will adapt */
  background-color: var(--background-muted);
  /* Use text-primary, which will adapt */
  color: var(--text-primary);
  /* Consider a subtle shadow for cancel button */
  box-shadow: 0 2px 5px var(--shadow-color-light);
}

.cancelButton:hover:not(:disabled) {
  /* Use background-darker-muted or primary-blue-light on hover */
  background-color: var(--background-darker-muted); /* New variable needed, or use a calculated rgba */
}

.cancelButton:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

/* --- Messages --- */
.errorMessage {
  /* Use error-red, which will adapt */
  color: var(--error-red);
  /* Background should be derived from error-red with opacity */
  background-color: rgba(var(--error-red-rgb), 0.1); /* Requires RGB version of error-red */
  /* Border should be derived from error-red */
  border: 1px solid var(--error-red);
  padding: 0.7rem 1rem;
  border-radius: 0.5rem;
  font-size: 0.9rem;
  margin-top: 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  text-align: left;
}

.successMessage {
  /* Use success-green, which will adapt */
  color: var(--success-green);
  /* Background should be derived from success-green with opacity */
  background-color: rgba(var(--success-green-rgb), 0.1); /* Requires RGB version of success-green */
  /* Border should be derived from success-green */
  border: 1px solid var(--success-green);
  padding: 0.7rem 1rem;
  border-radius: 0.5rem;
  font-size: 0.9rem;
  margin-top: 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  text-align: left;
}


/* --- Responsive Adjustments --- */
@media (max-width: 768px) {
  .container {
    padding: 1rem;
    margin: 1rem auto;
  }

  .heading {
    font-size: 1.8rem;
    margin-bottom: 1.5rem;
  }

  .card {
    padding: 1.5rem;
  }

  .userName {
    font-size: 1.5rem;
  }

  .sectionTitle {
    font-size: 1.2rem;
  }

  .infoGrid {
    grid-template-columns: 1fr;
  }

  .editButtonContainer {
    flex-direction: column;
  }

  .editButton {
    width: 100%;
    justify-content: center;
  }
}

@media (max-width: 480px) {
  .card {
    padding: 1rem;
  }

  .formCard {
    padding: 1rem;
  }
}


.passwordInputWrapper {
  position: relative;
  display: flex;
  align-items: center;
}

.eyeIcon {
  position: absolute;
  right: 1rem;
  /* Use text-muted for icons, which will adapt */
  color: var(--text-muted);
  cursor: pointer;
}

.passwordStrength {
  margin-top: 0.25rem;
  display: flex;
  align-items: center;
  font-size: 0.85rem;
  /* Color should be based on strength (e.g., green for strong, red for weak)
     but default text could be muted or primary.
     You'll likely apply a dynamic color based on strength in your JS/React component.
  */
  color: var(--text-muted);
}