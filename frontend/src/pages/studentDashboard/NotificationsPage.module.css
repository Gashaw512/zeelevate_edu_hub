/* --- src/pages/Notifications.module.css --- */

.notificationsPageContainer {
  padding: 2.5rem;
  /* Use background-muted, which adapts to theme */
  background-color: var(--background-muted);
  /* Use header-height variable for consistent calculation */
  min-height: calc(100vh - var(--header-height, 64px));
  border-radius: 1rem;
  /* Use shadow variable for consistency */
  box-shadow: 0 6px 20px var(--shadow-color-light);
  display: flex;
  flex-direction: column;
  gap: 2rem;
  /* Use text-primary, which adapts to theme */
  color: var(--text-primary);
  font-family: 'Outfit', sans-serif; /* Ensure font matches global */
  transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease; /* Smooth transitions */
}

/* --- Page Header --- */
.pageHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 1.5rem;
  padding-bottom: 1rem;
  /* Use border-light, which adapts to theme */
  border-bottom: 1px solid var(--border-light);
}

.pageTitle {
  font-size: 2.2rem;
  font-weight: 700;
  /* Use primary-blue-dark, which adapts to theme */
  color: var(--primary-blue-dark);
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin: 0;
}

.pageTitleIcon {
  /* Use primary-blue, which adapts to theme */
  color: var(--primary-blue);
}

.actionsGroup {
  display: flex;
  gap: 0.75rem;
  flex-wrap: wrap;
}

.actionButton {
  /* Use primary-blue, which adapts to theme */
  background-color: var(--primary-blue);
  /* Use text-light, which adapts to theme (white/light gray) */
  color: var(--text-light);
  border: none;
  border-radius: 0.75rem;
  padding: 0.75rem 1.2rem;
  font-size: 0.95rem;
  font-weight: 600;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  transition: background-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
  /* Use shadow variable for consistency */
  box-shadow: 0 2px 8px var(--shadow-color-light);
}

.actionButton:hover:not(:disabled) {
  /* Use hover-blue, which adapts to theme */
  background-color: var(--hover-blue);
  transform: translateY(-2px);
  /* Use shadow variable for consistency */
  box-shadow: 0 4px 12px var(--shadow-color-light); /* Lighter shadow on hover */
}

.actionButton:disabled {
  /* Use text-muted or a specific disabled background variable if defined */
  background-color: var(--cool-gray);
  cursor: not-allowed;
  opacity: 0.7;
  box-shadow: none;
}

.dangerButton {
  /* Use error-red, which adapts to theme */
  background-color: var(--error-red);
}

.dangerButton:hover:not(:disabled) {
  /* Use error-red (darker shade if available) or a specific hover variable */
  background-color: var(--error-red); /* Keep same, or define --error-red-dark in :root */
}

.spinner {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* --- Filter Tabs --- */
.filterTabs {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1rem;
  /* Use border-light, which adapts to theme */
  border-bottom: 1px solid var(--border-light);
  padding-bottom: 0.5rem;
}

.filterTab {
  background-color: transparent;
  border: none;
  padding: 0.75rem 1.2rem;
  font-size: 1rem;
  font-weight: 600;
  /* Use text-muted, which adapts to theme */
  color: var(--text-muted);
  cursor: pointer;
  border-radius: 0.5rem;
  transition: all 0.2s ease;
  position: relative; /* For the active indicator */
}

.filterTab:hover:not(.activeTab) {
  /* Use background-muted, which adapts to theme */
  background-color: var(--background-muted);
  /* Use text-primary, which adapts to theme */
  color: var(--text-primary);
}

.filterTab.activeTab {
  /* Use primary-blue, which adapts to theme */
  color: var(--primary-blue);
  /* Use background-secondary, which adapts to theme */
  background-color: var(--background-secondary);
  /* Use shadow variable for consistency */
  box-shadow: 0 2px 8px var(--shadow-color-light);
  /* Use primary-blue for indicator, which adapts to theme */
  border-bottom: 3px solid var(--primary-blue);
  padding-bottom: calc(0.75rem - 3px);
}

/* --- Notification List --- */
.notificationList {
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
  /* Use background-secondary, which adapts to theme */
  background-color: var(--background-secondary);
  border-radius: 1rem;
  /* Use shadow variable for consistency */
  box-shadow: 0 2px 10px var(--shadow-color-light);
  padding: 1.5rem;
  transition: background-color 0.3s ease, box-shadow 0.3s ease; /* Smooth transitions */
}

.notificationItem {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem 1.2rem;
  border-radius: 0.75rem;
  /* Use border-light, which adapts to theme */
  border: 1px solid var(--border-light);
  transition: all 0.2s ease;
}

.notificationItem.unread {
  /* Use background-muted for unread, which adapts to theme */
  background-color: var(--background-muted);
  /* Use primary-blue for accent, which adapts to theme */
  border-left: 5px solid var(--primary-blue);
  padding-left: calc(1.2rem - 5px);
}

.notificationItem.unread:hover {
  /* Use primary-blue-light for hover, which adapts to theme */
  background-color: var(--primary-blue-light);
  transform: translateY(-2px);
  /* Use shadow variable for consistency */
  box-shadow: 0 2px 8px var(--shadow-color-light);
}

.notificationItem.read {
  /* Use background-secondary for read, which adapts to theme */
  background-color: var(--background-secondary);
  /* Use text-muted, which adapts to theme */
  color: var(--text-muted);
}

.notificationItem.read:hover {
  /* Use background-muted for hover, which adapts to theme */
  background-color: var(--background-muted);
}

.notificationContent {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  min-width: 0;
  margin-right: 1rem;
}

.notificationMessage {
  font-size: 0.95rem;
  line-height: 1.4;
  margin: 0;
  word-wrap: break-word;
  color: inherit; /* Inherits color from parent (.read/.unread) */
}

.notificationTimestamp {
  font-size: 0.78rem;
  /* Use text-muted, which adapts to theme */
  color: var(--text-muted);
  margin-top: 0.4rem;
}

.itemActions {
  display: flex;
  gap: 0.5rem;
  flex-shrink: 0;
}

.itemActionButton {
  /* Use background-secondary, which adapts to theme */
  background-color: var(--background-secondary);
  /* Use border-light, which adapts to theme */
  border: 1px solid var(--border-light);
  /* Use text-muted, which adapts to theme */
  color: var(--text-muted);
  border-radius: 0.5rem;
  padding: 0.6rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  /* Use shadow variable for consistency */
  box-shadow: 0 1px 3px var(--shadow-color-light);
}

.itemActionButton:hover {
  /* Use background-muted, which adapts to theme */
  background-color: var(--background-muted);
  /* Use primary-blue, which adapts to theme */
  color: var(--primary-blue);
  transform: translateY(-1px);
  /* Use shadow variable for consistency */
  box-shadow: 0 2px 5px var(--shadow-color-light);
}

.markReadButton {
  /* Use primary-blue, which adapts to theme */
  color: var(--primary-blue);
}

.markReadButton:hover {
  /* Use primary-blue-light, which adapts to theme */
  background-color: var(--primary-blue-light);
}

.deleteButton {
  /* Use error-red, which adapts to theme */
  color: var(--error-red);
}

.deleteButton:hover {
  /* Use error-red with some opacity for hover, which adapts to theme */
  background-color: rgba(var(--error-red-rgb), 0.1); /* Requires RGB version of error-red */
}

/* --- Empty State / Status Container (reused styles) --- */
.fullPageStatusContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 60vh;
  /* Use background-secondary, which adapts to theme */
  background-color: var(--background-secondary);
  padding: 2rem;
  border-radius: 1rem;
  /* Use shadow variable for consistency */
  box-shadow: 0 4px 10px var(--shadow-color-light);
  /* Use text-primary, which adapts to theme */
  color: var(--text-primary);
  text-align: center;
  transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease; /* Smooth transitions */
}

.errorContainer {
  composes: fullPageStatusContainer;
  /* Use error-red, which adapts to theme */
  background-color: var(--error-red);
  /* Use text-light, which adapts to theme */
  color: var(--text-light);
  /* This shadow has a fixed RGBA. If you want it to adapt, you'll need a specific shadow variable for error backgrounds. */
  box-shadow: 0 8px 20px rgba(220, 53, 69, 0.3);
  transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease;
}

.errorIcon {
  /* Use text-light, which adapts to theme */
  color: var(--text-light);
  margin-bottom: 1.2rem;
}

.errorHeading {
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 1rem;
  /* Use text-light, which adapts to theme */
  color: var(--text-light);
}

.errorText {
  /* Use text-light-alt, which adapts to theme */
  color: var(--text-light-alt);
  text-align: center;
  max-width: 600px;
  margin-bottom: 1.5rem;
  font-size: 1.1rem;
  margin-top: 1.5rem;
}

/* --- Empty State for Notifications List --- */
.emptyState {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 3rem;
  /* Use background-muted, which adapts to theme */
  background-color: var(--background-muted);
  border-radius: 0.75rem;
  /* Use border-light, which adapts to theme */
  border: 1px dashed var(--border-light);
  text-align: center;
  transition: background-color 0.3s ease, border-color 0.3s ease; /* Smooth transitions */
}

.emptyStateIcon {
  /* Use cool-gray, which adapts to theme */
  color: var(--cool-gray);
  margin-bottom: 1rem;
}

.emptyStateText {
  font-size: 1.1rem;
  /* Use text-muted, which adapts to theme */
  color: var(--text-muted);
  margin: 0;
}

/* --- Responsive Adjustments (kept same as before) --- */
@media (max-width: 767px) {
  .notificationsPageContainer {
    padding: 1.5rem;
    gap: 1.5rem;
  }

  .pageHeader {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .pageTitle {
    font-size: 1.8rem;
    width: 100%;
  }

  .actionsGroup {
    width: 100%;
    flex-direction: column;
    gap: 0.75rem;
  }

  .actionButton {
    width: 100%;
    justify-content: center;
    padding: 0.8rem 1rem;
    font-size: 0.9rem;
  }

  .filterTabs {
    flex-direction: column;
    gap: 0.75rem;
    padding-bottom: 0;
    border-bottom: none;
  }

  .filterTab {
    width: 100%;
    text-align: center;
    padding: 0.6rem 1rem;
    border-bottom: 1px solid var(--border-light);
  }
  .filterTab:last-child {
    border-bottom: none;
  }

  .filterTab.activeTab {
    border-bottom: 3px solid var(--primary-blue);
    padding-bottom: calc(0.6rem - 3px);
  }

  .notificationList {
    padding: 1rem;
  }

  .notificationItem {
    flex-direction: column;
    align-items: flex-start;
    padding: 0.8rem 1rem;
  }

  .notificationItem.unread {
    padding-left: calc(1rem - 5px);
  }

  .notificationContent {
    margin-right: 0;
    margin-bottom: 0.8rem;
  }

  .notificationMessage {
    font-size: 0.9rem;
  }

  .notificationTimestamp {
    font-size: 0.7rem;
  }

  .itemActions {
    width: 100%;
    justify-content: space-around;
  }

  .itemActionButton {
    padding: 0.5rem;
    font-size: 0.85rem;
  }
}

@media (max-width: 480px) {
  .notificationsPageContainer {
    padding: 1rem;
    gap: 1rem;
  }

  .pageTitle {
    font-size: 1.5rem;
  }

  .actionButton {
    font-size: 0.85rem;
    padding: 0.7rem 0.8rem;
  }

  .filterTab {
    font-size: 0.9rem;
    padding: 0.5rem 0.8rem;
  }

  .notificationList {
    padding: 0.8rem;
  }

  .notificationItem {
    padding: 0.7rem 0.8rem;
  }

  .notificationItem.unread {
    padding-left: calc(0.8rem - 5px);
  }

  .emptyState {
    padding: 2rem;
  }

  .emptyStateIcon {
    font-size: 40px;
  }

  .emptyStateText {
    font-size: 1rem;
  }
}